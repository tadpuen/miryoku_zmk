// Copyright 2022 Manna Harbour
// https://github.com/manna-harbour/miryoku

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#include "miryoku.h"

#include <dt-bindings/zmk/mouse.h>

/ {
  keymap {
    compatible = "zmk,keymap";
#define MIRYOKU_X(LAYER, STRING) \
    LAYER { \
      label = STRING; \
      bindings = < U_MACRO_VA_ARGS(MIRYOKU_LAYERMAPPING_##LAYER, MIRYOKU_LAYER_##LAYER) >; \
    };
MIRYOKU_LAYER_LIST
#undef MIRYOKU_X
  };
};

#define T_MACRO_TIMEOUT 75
#define TT_MACRO(LAYER, NAME, POSITION, BINDING) \
NAME {\
  layers = <LAYER>; \
  key-positions = <POSITION>; \
  bindings = <BINDING>; \
  timeout-ms = <T_MACRO_TIMEOUT>; \
};\

#define T_MACRO3(layers, P, P2,P3, B, BI, BO)\
TT_MACRO(layers, tapiocombos_ ## layers ## trip_l ## P##P2##P3, l##P l##P2 l##P3 , B) \
TT_MACRO(layers, tapiocombos_ ## layers ## trip_l ## P##P2##P3##i, l##P l##P2 l##P3 inl, BI) \
TT_MACRO(layers, tapiocombos_ ## layers ## trip_l ## P##P2##P3##o, l##P l##P2 l##P3 outl, BO) \
TT_MACRO(layers, tapiocombos_ ## layers ## trip_r ## P##P2##P3, r##P r##P2 r##P3 , B) \
TT_MACRO(layers, tapiocombos_ ## layers ## trip_r ## P##P2##P3##i, r##P r##P2 r##P3 inr, BI) \
TT_MACRO(layers, tapiocombos_ ## layers ## trip_r ## P##P2##P3##o, r##P r##P2 r##P3 outr, BO) 


#define VERT(layers, U, B, BI, BO) \
TT_MACRO(layers, tapiocombos_vert ## layers ## diag_l_ ## U, lt##U lb##U, B) \
TT_MACRO(layers, tapiocombos_vert ## layers ## diag_l_ ## U##i, lt##U lb##U inl, BI) \
TT_MACRO(layers, tapiocombos_vert ## layers ## diag_l_ ## U##o, lt##U lb##U outl, BO) \
TT_MACRO(layers, tapiocombos_vert ## layers ## diag_r_ ## U, rt##U rb##U, B) \
TT_MACRO(layers, tapiocombos_vert ## layers ## diag_r_ ## U##i, rt##U rb##U inr, BI) \
TT_MACRO(layers, tapiocombos_vert ## layers ## diag_r_ ## U##o, rt##U rb##U outr, BO) 

#define d(layers, U, L, B, BI, BO) \
TT_MACRO(layers, tapiocombos_ ## layers ## diag_l_ ## U##L, lt##U lb##L, B) \
TT_MACRO(layers, tapiocombos_ ## layers ## diag_l_ ## U##L##i, lt##U lb##L inl, BI) \
TT_MACRO(layers, tapiocombos_ ## layers ## diag_l_ ## U##L##o, lt##U lb##L outl, BO) \
TT_MACRO(layers, tapiocombos_ ## layers ## diag_r_ ## U##L, rt##U rb##L, B) \
TT_MACRO(layers, tapiocombos_ ## layers ## diag_r_ ## U##L##i, rt##U rb##L inr, BI) \
TT_MACRO(layers, tapiocombos_ ## layers ## diag_r_ ## U##L##o, rt##U rb##L outr, BO) 

#define T_MACRO1(LAYER, POSITION, BINDING_I, BINDING_O) \
TT_MACRO(LAYER, tapiocombos_I_ ## LAYER ## _ ## POSITION ## _ ## l, U_MACRO_VA_ARGS(POSITION, l) inl, BINDING_I)\
TT_MACRO(LAYER, tapiocombos_O_ ## LAYER ## _ ## POSITION ## _ ## l, U_MACRO_VA_ARGS(POSITION, l) outl, BINDING_O)\
TT_MACRO(LAYER, tapiocombos_I_ ## LAYER ## _ ## POSITION ## _ ## r, U_MACRO_VA_ARGS(POSITION, r) inr, BINDING_I)\
TT_MACRO(LAYER, tapiocombos_O_ ## LAYER ## _ ## POSITION ## _ ## r, U_MACRO_VA_ARGS(POSITION, r) outr, BINDING_O)

#define T_MACRO2(LAYER, H, POSITION, BINDING, BINDING_I, BINDING_O) \
TT_MACRO(LAYER, tapiocombos_ ## LAYER ## _ ## H ## _ ## POSITION ## _ ## l, U_MACRO_VA_ARGS(POSITION, H, l), BINDING)\
TT_MACRO(LAYER, tapiocombos_I_ ## LAYER ## _ ## H ## _ ## POSITION ## _ ## l, U_MACRO_VA_ARGS(POSITION, H, l) inl, BINDING_I)\
TT_MACRO(LAYER, tapiocombos_O_ ## LAYER ## _ ## H ## _ ## POSITION ## _ ## l, U_MACRO_VA_ARGS(POSITION, H, l) outl, BINDING_O)\
TT_MACRO(LAYER, tapiocombos_ ## LAYER ## _ ## H ## _ ## POSITION ## _ ## r, U_MACRO_VA_ARGS(POSITION, H, r), BINDING)\
TT_MACRO(LAYER, tapiocombos_I_ ## LAYER ## _ ## H ## _ ## POSITION ## _ ## r, U_MACRO_VA_ARGS(POSITION, H, r) inr, BINDING_I)\
TT_MACRO(LAYER, tapiocombos_O_ ## LAYER ## _ ## H ## _ ## POSITION ## _ ## r, U_MACRO_VA_ARGS(POSITION, H, r) outr, BINDING_O)

#define rti 16
#define rtm 17
#define rtr 18
#define rtp 19
#define rbi 27
#define rbm 28
#define rbr 29
#define rbp 30
#define lti 13
#define ltm 12
#define ltr 11
#define ltp 10
#define lbi 24
#define lbm 23
#define lbr 22
#define lbp 21

#define outr 35 
#define outl 32 
#define inr 36 
#define inl 33 

#define ti(S) S ## ti
#define tm(S) S ## tm
#define tr(S) S ## tr
#define tp(S) S ## tp
#define bi(S) S ## bi
#define bm(S) S ## bm
#define br(S) S ## br
#define bp(S) S ## bp

#define im(T,S) S ## T ## i S ## T ## m
#define rp(T,S) S ## T ## r S ## T ## p
#define ip(T,S) S ## T ## i S ## T ## p
#define mr(T,S) S ## T ## m S ## T ## r
#define ir(T,S) S ## T ## i S ## T ## r
#define mp(T,S) S ## T ## m S ## T ## p


/ {
  combos {
    compatible = "zmk,combos";
    T_MACRO1(T_LAYERS, ti, &kp LS(I), &kp LPAR)
    T_MACRO1(T_LAYERS, tm, &kp LS(N), &kp LBKT)
    T_MACRO1(T_LAYERS, tr, &kp LS(S), &kp LBRC)
    T_MACRO1(T_LAYERS, tp, &kp LS(R), &kp GT)
    T_MACRO1(T_LAYERS, bi, &kp LS(E), &kp RPAR)
    T_MACRO1(T_LAYERS, bm, &kp LS(T), &kp RBKT)
    T_MACRO1(T_LAYERS, br, &kp LS(O), &kp RBRC)
    T_MACRO1(T_LAYERS, bp, &kp LS(A), &kp LT)

    T_MACRO2(T_LAYERS, t, rp, &kp B, &kp LS(B), &kp N9)
    T_MACRO2(T_LAYERS, t, im, &kp Y, &kp LS(Y), &kp N5)
    T_MACRO2(T_LAYERS, t, mr, &kp P, &kp LS(P), &kp N7)
    T_MACRO2(T_LAYERS, t, ip, &kp G, &kp LS(G), &kp HASH)
    T_MACRO2(T_LAYERS, t, mp, &kp Z, &kp LS(Z), &kp N8)
    T_MACRO2(T_LAYERS, t, ir, &kp F, &kp LS(F), &kp N6)
    T_MACRO2(T_LAYERS, b, rp, &kp L, &kp LS(L), &kp N4)
    T_MACRO2(T_LAYERS, b, im, &kp H, &kp LS(H), &kp N0)
    T_MACRO2(T_LAYERS, b, mr, &kp U, &kp LS(U), &kp N2)
    T_MACRO2(T_LAYERS, b, ip, &kp D, &kp LS(D), &kp AT)
    T_MACRO2(T_LAYERS, b, mp, &kp Q, &kp LS(Q), &kp N3)
    T_MACRO2(T_LAYERS, b, ir, &kp C, &kp LS(C), &kp N1)

    VERT(T_LAYERS, i, &sk LSHFT, &kp LEFT, &kp HOME)
    VERT(T_LAYERS, m, &sk LCTRL, &kp DOWN, &kp PG_DN)
    VERT(T_LAYERS, r, &sk LALT, &kp UP, &kp PG_UP)
    VERT(T_LAYERS, p, &sk LGUI, &kp RIGHT, &kp END)

    T_MACRO3(T_LAYERS, ti, tm, tr, &kp TAB, &kp DEL, &none) // fn - another layer?
    T_MACRO3(T_LAYERS, bi, bm, br, &kp RET, &kp ESC, &none) // agr?

    d(T_LAYERS, i,r, &kp K,&kp LS(K), &kp PLUS)
    d(T_LAYERS, r,i, &kp V,&kp LS(V), &kp STAR)
    d(T_LAYERS, m,p, &kp J,&kp LS(J), &kp EQUAL)
    d(T_LAYERS, p,m, &kp X,&kp LS(X), &kp CARET)
    d(T_LAYERS, i,p, &kp W,&kp LS(W), &kp AMPS)
    d(T_LAYERS, p,i, &kp M,&kp LS(M), &kp DLLR)
    d(T_LAYERS, m,r, &kp MINUS,&kp LS(MINUS), &kp PRCNT)
    d(T_LAYERS, r,m, &kp SLASH,&kp BACKSLASH, &kp PIPE)
    d(T_LAYERS, i,m, &kp QMARK,&kp EXCL, &none)
    d(T_LAYERS, m,i, &kp COMMA,&kp PERIOD, &kp TILDE)
    d(T_LAYERS, r,p, &kp APOS,&kp DQT, &kp GRAVE)
    d(T_LAYERS, p,r, &kp SEMI,&kp COLON, &none)

  };
};


#undef T_MACRO


#include "miryoku_shift_functions.dtsi"

#include "miryoku_double_tap_guard.dtsi"

#if defined (MIRYOKU_KLUDGE_MOUSEKEYSPR)
  #include "miryoku_kludge_mousekeyspr.dtsi"
#else
  #include "miryoku_mousekeys.dtsi"
#endif

#if defined (MIRYOKU_KLUDGE_THUMBCOMBOS)
  #include "miryoku_kludge_thumbcombos.dtsi"
#endif

#if defined (MIRYOKU_KLUDGE_TOPROWCOMBOS)
  #include "miryoku_kludge_toprowcombos.dtsi"
#endif

#if defined (MIRYOKU_KLUDGE_BOTTOMROWCOMBOS)
  #include "miryoku_kludge_bottomrowcombos.dtsi"
#endif

#if defined (MIRYOKU_KLUDGE_TAPDELAY)
  #include "miryoku_kludge_tapdelay.dtsi"
#else
  #include "miryoku_behaviors.dtsi"
#endif
